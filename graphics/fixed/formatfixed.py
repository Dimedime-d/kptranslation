# This is for graphics that don't need to be repointed
import os
from PIL import Image

palettes = {
    "level labels": [32, 152, 160, 0, 0, 0, 32, 152, 160, 240, 152, 152, 0, 64, 144, 0, 96, 160, 0, 128, 184, 184, 72, 0, 200, 128, 16, 224, 184, 40, 248, 248, 64, 0, 0, 0, 56, 56, 56, 120, 120, 120, 184, 184, 184, 248, 248, 248],
}

TEMP_FOLDER = "reserve"
DUMP_FOLDER = "dumps"

bs = '\\'

fixed_graphics = {
    "demo":     {"pal": "level labels"},
    "replay":   {"pal": "level labels"},
}

def make_fixed_dmps():
    for key, dat in fixed_graphics.items():
        base_img_file = f"{key}.png"
        palette = palettes[dat["pal"]]
        converted_img_file, width = quantize_image_to_palette_and_save(base_img_file, palette)
        bin_file = os.path.join(DUMP_FOLDER, f"{key}")
        
        # case-by-case grit operations, unfortunately
        if (key in ["demo", "replay"]):
            # In order: No palette, 4bpp, tile format, NO MAP,
            # 4x2 metatiles, .bin file, no header, output file
            os.system(f"cmd /c ..\grit {converted_img_file} -p! -gB4 -gt -m! -Mw4 -Mh2 -ftb -fh! -o {bin_file}")
            dmp_file = f"{bin_file}.dmp"
            if os.path.exists(dmp_file):
                os.remove(dmp_file)
            os.rename(f"{bin_file}.img.bin", dmp_file)
            print(f"wrote {dmp_file}")
            fixed_graphics[key]["dmp"] = os.path.join("graphics", "fixed", dmp_file)
            
def make_asm_file():
    with open("fixedgraphics.asm", "w") as file:
        file.write(f"""; This file was automatically generated by formatfixed.py
    
.macro demoheader ; source: 0x08287244
	.byte   0x02,0x70,0x1C,0x08, {bs}
            0xE4,0xF9,0x24,0x08, {bs}
            0x04,0xF9,0x24,0x08
.endmacro    

.macro replayheader ; source: 0x08287450
    .byte   0x02,0x70,0x1C,0x08, {bs}
            0xE4,0xF9,0x24,0x08, {bs}
            0x04,0xF9,0x24,0x08  ; normalize y-position
.endmacro

.macro keygetheader ; source: 0x0829CEAC
    .byte   0x06,0x70,0x28,0x30, {bs}
            0xD8,0xD0,0x44,0x10, {bs}
            0xF7,0xD0,0x44,0x10, {bs}
            0x16,0xD0,0x44,0x10, {bs}
            0xDA,0xEF,0x14,0x04, {bs}
            0xF7,0xEF,0x24,0x08, {bs}
            0x16,0xEF,0x12,0x02
.endmacro

.macro norecordheader ; source: 0x0829BBC0
    .byte   0x0A,0x00,0x78,0x50, {bs}
            0x89,0xB1,0x44,0x10, {bs}
            0xA8,0xB1,0x44,0x10, {bs}
            0xC7,0xB1,0x44,0x10, {bs}
            0xE6,0xB1,0x44,0x10, {bs}
            0x05,0xB1,0x41,0x04, {bs}
            0x89,0xD0,0x14,0x04, {bs}
            0xA8,0xD0,0x14,0x04, {bs}
            0xC7,0xD0,0x14,0x04, {bs}
            0xE6,0xD0,0x14,0x04, {bs}
            0x05,0xD0,0x11,0x01, {bs}
.endmacro

.org 0x08287244
.region 0x08287450 - org()
    demoheader
    .incbin "{fixed_graphics["demo"]["dmp"]}"
.endregion

.org 0x08287450
.region 0x0828765C - org()
    replayheader
    .incbin "{fixed_graphics["replay"]["dmp"]}"
.endregion""")
    
        
def quantize_image_to_palette_and_save(img_file, palette):
    """Quantizes given image to palette, saves and returns path to converted image file, + width"""
    img: Image.Image = Image.open(img_file)
    
    palImage = Image.new("P", (16, 16))
    palImage.putpalette(palette + [0, 0, 0] * 240)
    converted_image = img.convert("RGB").quantize(palette=palImage, dither=Image.NONE)
    converted_file = os.path.join(TEMP_FOLDER, f"{img_file[:-4]}-converted.png")
    converted_image.save(converted_file)
    return converted_file, converted_image.width

def main():
    if not os.path.exists(TEMP_FOLDER):
        os.makedirs(TEMP_FOLDER)
    make_fixed_dmps()
    make_asm_file()

if __name__ == "__main__":
    main()