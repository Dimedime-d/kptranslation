# This is for graphics that don't need to be repointed
import os
import struct
from PIL import Image

palettes = {
    "level labels": [32, 152, 160, 0, 0, 0, 32, 152, 160, 240, 152, 152, 0, 64, 144, 0, 96, 160, 0, 128, 184, 184, 72, 0, 200, 128, 16, 224, 184, 40, 248, 248, 64, 0, 0, 0, 56, 56, 56, 120, 120, 120, 184, 184, 184, 248, 248, 248],
    "no record": [0, 0, 0, 248, 0, 0, 248, 0, 0, 248, 0, 0, 248, 0, 0, 248, 0, 0, 248, 0, 0, 248, 0, 0, 248, 0, 0, 248, 0, 0, 112, 216, 248, 0, 72, 128, 56, 112, 152, 120, 152, 168, 184, 200, 208, 248, 248, 248],
}

TEMP_FOLDER = "reserve"
DUMP_FOLDER = "dumps"

bs = '\\'

fixed_graphics = {
    "demo":     {"pal": "level labels"},
    "replay":   {"pal": "level labels"},
    "no_record": {"pal": "no record"},
}

def make_fixed_dmps():
    for key, dat in fixed_graphics.items():
        base_img_file = f"{key}.png"
        palette = palettes[dat["pal"]]
        converted_img_file, width = quantize_image_to_palette_and_save(base_img_file, palette)
        bin_file = os.path.join(DUMP_FOLDER, f"{key}")
        # case-by-case grit operations, unfortunately
        if (key in ["demo", "replay"]):
            # In order: No palette, 4bpp, tile format, NO MAP,
            # 4x2 metatiles, .bin file, no header, output file
            os.system(f"cmd /c ..\grit {converted_img_file} -p! -gB4 -gt -m! -Mw4 -Mh2 -ftb -fh! -o {bin_file}")
            dmp_file = f"{bin_file}.dmp"
            if os.path.exists(dmp_file):
                os.remove(dmp_file)
            os.rename(f"{bin_file}.img.bin", dmp_file)
            print(f"wrote {dmp_file}")
            fixed_graphics[key]["dmp"] = os.path.join("graphics", "fixed", dmp_file)
        if (key == "no_record"):
            # A slew of grit operations to make sure graphics fit in the same location
            files = [f"{os.path.join(TEMP_FOLDER, f'{os.path.basename(base_img_file[:-4])},{i}')}" for i in range(4)]
            # Different bounding boxes for each grit, specified by al, aw, at, ah
            # Otherwise, in order: (no) palette, 4bpp, no tilemap, 4x4 metatiles, bounding box, export binary without header, output file path
            os.system(f"cmd /c ..\grit {base_img_file} -p -gB4 -gt -m! -Mh4 -Mw4 -al0 -aw128 -at0 -ah32 -ftb -fh! -o {files[0]}")
            # The 8x32 metatile at the end
            os.system(f"cmd /c ..\grit {base_img_file} -p! -gB4 -gt -m! -Mh4 -Mw1 -al128 -aw8 -at0 -ah32 -ftb -fh! -o {files[1]}")
            # 32x8 metatiles along the bottom
            os.system(f"cmd /c ..\grit {base_img_file} -p! -gB4 -gt -m! -Mh1 -Mw4 -al0 -aw128 -at32 -ah8 -ftb -fh! -o {files[2]}")
            # Last 8x8 metatile at the bottom corner
            os.system(f"cmd /c ..\grit {base_img_file} -p! -gB4 -gt -m! -Mh1 -Mw1 -al128 -aw8 -at32 -ah8 -ftb -fh! -o {files[3]}")
            
            # Merge binaries
            dmp_file = os.path.join(DUMP_FOLDER, f"{os.path.basename(base_img_file[:-4])}.dmp")
            with open(dmp_file, "wb") as file:
                for f in files:
                    with open(f"{f}.img.bin", "rb") as file2:
                        file.write(file2.read())
        
            print(f"wrote {dmp_file}")
            fixed_graphics[key]["dmp"] = os.path.join("graphics", "fixed", dmp_file)
            
def make_asm_file():
    with open("fixedgraphics.asm", "w") as file:
        file.write(f"""; This file was automatically generated by formatfixed.py
    
.macro demoheader ; source: 0x08287244
	.byte   0x02,0x70,0x1C,0x08, {bs}
            0xE4,0xF9,0x24,0x08, {bs}
            0x04,0xF9,0x24,0x08
.endmacro    

.macro replayheader ; source: 0x08287450
    .byte   0x02,0x70,0x1C,0x08, {bs}
            0xE4,0xF9,0x24,0x08, {bs}
            0x04,0xF9,0x24,0x08  ; normalize y-position
.endmacro

.macro keygetheader ; source: 0x0829CEAC
    .byte   0x06,0x70,0x28,0x30, {bs}
            0xD8,0xD0,0x44,0x10, {bs}
            0xF7,0xD0,0x44,0x10, {bs}
            0x16,0xD0,0x44,0x10, {bs}
            0xDA,0xEF,0x14,0x04, {bs}
            0xF7,0xEF,0x24,0x08, {bs}
            0x16,0xEF,0x12,0x02
.endmacro

.macro norecordheader ; source: 0x0829BBC0
    .byte   0x0A,0x00,0x78,0x50, {bs}
            0x89,0xB1,0x44,0x10, {bs}
            0xA8,0xB1,0x44,0x10, {bs}
            0xC7,0xB1,0x44,0x10, {bs}
            0xE6,0xB1,0x44,0x10, {bs}
            0x05,0xB1,0x41,0x04, {bs}
            0x89,0xD0,0x14,0x04, {bs}
            0xA8,0xD0,0x14,0x04, {bs}
            0xC7,0xD0,0x14,0x04, {bs}
            0xE6,0xD0,0x14,0x04, {bs}
            0x05,0xD0,0x11,0x01
.endmacro

.org 0x08287244
.area 0x08287450 - org()
    demoheader
    .incbin "{fixed_graphics["demo"]["dmp"]}"
.endarea

.org 0x08287450
.area 0x0828765C - org()
    replayheader
    .incbin "{fixed_graphics["replay"]["dmp"]}"
.endarea

.org 0x0829BBC0
.area 0x0829C68C - org()
    norecordheader
    .incbin "{fixed_graphics["no_record"]["dmp"]}"
.endarea

; just write a new palette for no record because grit fucked up
.org 0x081C3BD0
.area 0x20
    .incbin "{os.path.join("graphics", "fixed", "dumps", "no_record,0.pal.bin")}"
.endarea
"""
)
    
        
def quantize_image_to_palette_and_save(img_file, palette):
    """Quantizes given image to palette, saves and returns path to converted image file, + width"""
    img: Image.Image = Image.open(img_file)
    
    palImage = Image.new("P", (16, 16))
    palImage.putpalette(palette + [0, 0, 0] * 240)
    converted_image = img.convert("RGB").quantize(palette=palImage, dither=Image.NONE)
    converted_file = os.path.join(TEMP_FOLDER, f"{img_file[:-4]}-converted.bmp")
    converted_image.save(converted_file)
    return converted_file, converted_image.width

def main():
    if not os.path.exists(TEMP_FOLDER):
        os.makedirs(TEMP_FOLDER)
    make_fixed_dmps()
    make_asm_file()

if __name__ == "__main__":
    main()